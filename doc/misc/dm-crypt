##
# dm-crypt - a way of encrypting and decrypting files using a cryptographic
# 			cipher.
# $Header: /opt/cvsroot/doc/tech/dm-crypt,v 1.3 2006/08/10 17:08:58 jick Exp $

= Document =
 * http://www.saout.de/misc/dm-crypt/
 * http://www.saout.de/tikiwiki/
 * http://deb.riseup.net/storage/encryption/dmcrypt/
 * cipher speed comparisons:
   fp.gladman.plus.com/cryptography_technology/aesr2/
 * http://gentoo-wiki.com/SECURITY_dmcrypt

= set up kernel =
 * Code maturity level options ---> 
   * on: Prompt for development and/or incomplete code/drivers 
 * General setup ---> 
   * on: Support for hot-pluggable devices 
 * Device Drivers > Multi-device support (RAID and LVM). 
   * on: Device mapper support  // dm-mod
   * on: Crypt target support // dm-crypt
 * Cryptographic options --->  // cryptoapi
   * on: AES cipher algorithms // AES

= Device Mapper =
 * Linux2.6 内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的
   块设备驱动提供了一个高度模块化的内核架构。
 * mapped device, dm_table, target device


= user space tool =
 * cryptsetup-luks:
   http://luks.endorphin.org/dm-crypt

= Using dmcrypt with a partition =
 # cryptsetup -y create mycrypt /dev/hda7 // create a device mapper
 # dmsetup ls // Has it worked?
 # mke2fs /dev/mapper/mycrypt // create a fs
 # mount /dev/mapper/mycrypt /mnt/point // Now mount it!
 # umount /mnt/point // bring it down
 # cryptsetup remove mycrypt

= Using cryptsetup LUKS with a partition =
 # crypsetup luksFormat /dev/hdb1
 # crypsetup luksFormat blockdev keyfile
 # cryptsetup -d keyfile luksOpen blockdev mapping_name
 # cryptsetup -d exitingkeyfile luksAddKey newkeyfile

= Using dmcrypt with a loopback device =
 # touch protected // create our file
 # shred -n1 -s50M protected
 # losetup -f // find the name of the first unused loop device
 # losetup /dev/loop0 /path/to/protected // set a loopback
 # cryptsetup -y create mycrypt /dev/loop0 // create a device mapper
 # dmsetup ls // check it worked
 # mke2fs /dev/mapper/mycrypt // create a filesystem
 # mount /dev/mapper/mycrypt /mount/point // mount it
 # umount /mount/point // umount it
 # cryptsetup remove mycrypt
 # losetup -d /dev/loop0

 # dd if=/dev/hdb2 of=/dev/mapper/test
 #

= cryptsetup in using =
 # echo $SECRET1 | cryptsetup -c aes-cbc-essiv:sha256 -h sha256 -o 68 -b
   100000000 create crypt1 /dev/hdb
 # echo $SECRET2 | cryptsetup -c aes-cbc-essiv:sha256 -h sha256 -o
 # 100000070 -b 100000000 create crypt2 /dev/hdb
# vim: ft=text:
