##
# gcc
# $Header: /opt/cvsroot/doc/tech/gcc,v 1.1 2006/08/10 17:14:12 jick Exp $


$ gcc -v
Reading specs from /usr/lib/gcc/i486-slackware-linux/3.4.6/specs
Configured with: ../gcc-3.4.6/configure --prefix=/usr --enable-shared --enable-threads=posix --enable-__cxa_atexit --disable-checking --with-gnu-ld --verbose --target=i486-slackware-linux --host=i486-slackware-linux
Thread model: posix
gcc version 3.4.6

$ arm-linux-gcc -v
Reading specs from /work/tools/3.2.1/bin/../lib/gcc-lib/arm-linux/3.2.1/specs
Configured with: ../configure --target=arm-linux --disable-shared --disable-threads --with-headers=/home/gerg/new-wave.xscale/linux-2.4.x/include --with-gnu-as --with-gnu-ld --enable-multilib --enable-languages=c,c++
Thread model: single
gcc version 3.2.1

$ arm-linux-gnueabi-gcc -v
Reading specs from /jick/.opt/arm-linux-gnueabi/bin/../lib/gcc/arm-linux-gnueabi/3.4.3/specs
Configured with: /scratchbox/users/slava/home/slava/crosstool/build/arm-linux-gnueabi/gcc-csl-arm-2005q1-glibc-csl-arm/gcc-csl-arm-2005q1/configure --target=arm-linux-gnueabi --host=i686-host_pc-linux-gnu --prefix=/opt/crosstool/gcc-csl-arm-2005q1-glibc-csl-arm/arm-linux-gnueabi --with-float=soft --with-arch=armv5te --with-headers=/opt/crosstool/gcc-csl-arm-2005q1-glibc-csl-arm/arm-linux-gnueabi/arm-linux-gnueabi/include --with-local-prefix=/opt/crosstool/gcc-csl-arm-2005q1-glibc-csl-arm/arm-linux-gnueabi/arm-linux-gnueabi --disable-nls --enable-threads=posix --enable-symvers=gnu --enable-__cxa_atexit --enable-languages=c,c++,f77 --enable-shared --enable-c99 --enable-long-long
Thread model: posix
gcc version 3.4.3 (release) (CodeSourcery ARM Q1B 2005)

= -mcpu VS -march =

At IRC channel #handhelds.org of freenode.net:

(jnan) hi all,  I'm confused by the difference between -mcpu and -march switch
of arm-linux-gcc, anyone
 give me a hand?
 (MonMotha) jnan: sure
 (jnan) MonMotha: thanks a lot
 (MonMotha) -mcpu tells it to optimize for whatever you give, but only use
 instructions present on a 
 certain baseline processor (whatever that may before your build).  It is
 depricated by -mtune (which does 
 the same thing) on modern versions of gcc
 (MonMotha) -march tells it to not only optimize for the specified processor,
 but use instructions which 
 may only exist on that processor
 (MonMotha) result is faster code, but the binary may not run on any other
 proc
 (MonMotha) if you're building for a certain model ipaq, for example, -march
 is fine, unless you want it to 
 maybe run on older ones as well.  Depends on how many feeds you want to build
 separate binaries for
 (MonMotha) if you're just building for your own unit, do whatever you feel is
 appropriate
 (MonMotha) and of course, play around! :)
 (jnan) MonMotha: when I use both -mcpu and -march, the compiler shows below
 warning message:
 (jnan) MonMotha: cc1: warning: switch -mcpu=xscale conflicts with -march=
 switch
 (jnan) MonMotha: while -march=armv4
 (MonMotha) ah, that's because armv4 is a lower common denominator than xscale
 (MonMotha) if you do -mcpu=xscale -march=armv4, it will generate armv4
 compatible code that is optimized 
 for xscale as much as possible while remaining generic armv4 compatible
 (MonMotha) flipping it around asks it to make code that is optimized for
 generic armv4 while using xscale 
 specific instructions, an impossible task
 (jnan) MonMotha: but which -march value is fine for xscale?
 (jnan) MonMotha: I've tried armv5te, too
 (MonMotha) -march implies -mcpu
 (MonMotha) all options that are valid for -march are valid for -mcpu and vice
 versa, but the more generic 
 one has to be the arch, since that specifies minimum instruction set
 compatibility, while -mcpu specifies 
 tuning (tries to order things such that pipeline effects will have the most
 good on that processor, for 
 example)

# vim:ft=text:
